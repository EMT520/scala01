package org.example

/**
 * @description TODO
 * @author hadoop
 * @date 2022/8/9 19:07
 */
/*
*List(("a", 100,0,0)，("b"，72,0,0)，("c"，82,0,0))
*其中: ("a",10,0,0）=>(学生,平时成绩，实验成绩，考试成绩)
* List(("a",100,0,0),("b",72,0,0),("c",82,0,0))=>平时成绩
* List(("a",0,80,0),("b",0,92,0),("c",0,90,0))=>实验成绩
* List(("a",0,0,80),("b",0,0,81),("c",0,0,72))=>考试成绩
* 总评成绩=平时成绩*30%+实验成绩*20%+考试成绩*50%
*计算学生的总评成绩
* List((a,86.0),(b,80.5),(c,78.6))
* 思路;
*1、转换成
* List((a,100,0,0)，(b,72,0,0)，(c,82,0,0)，(a,0,80,0),(b,0,92,0),(c,0,90,0),(a,0,0,80),(b,0,0,81),(c,0,0,72))
* 2、转换成
*Map(a -> List((a,100,0,0),(a,0,80,0),(a,0,0,80)),b ->List((b,72,0,0),(b,0,92,0),(b,0,0,81)),
* c -> List((c,82,0,0),(c,0,90,0),(c,0,0,72)))
* 3、转换成
Map(a -> (100,80,80)， b ->(72,92,81), c ->(82,90,72))
*4、转换成（用匹配模式计算）
* List((a,86.0),(b,80.5),(c,78.6))
*/

object Job_List3 {
  def main(args: Array[String]): Unit = {
    val list1=List(("a",100,0,0),("b",72,0,0),("c",82,0,0))
    val list2=List(("a",0,80,0),("b",0,92,0),("c",0,90,0))
    val list3=List(("a",0,0,80),("b",0,0,81),("c",0,0,72))
    val list4=list1++list2++list3
    val list5=list4.groupBy(_._1)
      .map(x=>{
        val v1=x._2.map(_._2).sum
        val v2=x._2.map(_._3).sum
        val v3=x._2.map(_._4).sum
        (x._1,(v1,v2,v3))
      })
      .map(x=>{
        val v=x._2 match{
          case(x,y,z)=>x*0.3+y*0.2+z*0.5
        }
        (x._1,v)
      }).toList.sortBy(_._1)
    println(list5)
  }

}
